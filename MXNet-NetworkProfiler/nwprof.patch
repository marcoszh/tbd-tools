From 26195b6bc7063a6f3393e9d9965cdf3de160222f Mon Sep 17 00:00:00 2001
From: Anand J <anandj@cs.ubc.ca>
Date: Sun, 22 Apr 2018 12:51:04 -0700
Subject: [PATCH 1/2] Layer-wise communication profiling

---
 include/mxnet/base.h         |  1 +
 src/engine/profiler.cc       | 33 ++++++++++++++++++++++++++++-----
 src/engine/profiler.h        |  8 +++++++-
 src/engine/threaded_engine.h |  8 ++------
 src/kvstore/kvstore_dist.h   | 28 ++++++++++++++++++++++++----
 5 files changed, 62 insertions(+), 16 deletions(-)

diff --git a/include/mxnet/base.h b/include/mxnet/base.h
index faf2fe1..24aa11c 100644
--- a/include/mxnet/base.h
+++ b/include/mxnet/base.h
@@ -146,6 +146,7 @@ struct Context {
     kGPU = gpu::kDevMask,
     kCPUPinned = 3,
     kCPUShared = 5,
+    kOverall
   };
   /*! \brief the device type we run the op on */
   DeviceType dev_type;
diff --git a/src/engine/profiler.cc b/src/engine/profiler.cc
index 13f8cca..e57c2c4 100644
--- a/src/engine/profiler.cc
+++ b/src/engine/profiler.cc
@@ -53,7 +53,7 @@ Profiler::Profiler()
   this->gpu_num_ = 0;
 #endif
 
-  this->profile_stat = new DevStat[cpu_num_ + gpu_num_ + 1];
+  this->profile_stat = new DevStat[cpu_num_ + gpu_num_ + 1 + 1];
   for (unsigned int i = 0; i < cpu_num_; ++i) {
     profile_stat[i].dev_name_ = "cpu/" + std::to_string(i);
   }
@@ -61,6 +61,7 @@ Profiler::Profiler()
     profile_stat[cpu_num_ + i].dev_name_ = "gpu/" + std::to_string(i);
   }
   profile_stat[cpu_num_ + gpu_num_].dev_name_ = "cpu pinned/";
+  profile_stat[cpu_num_ + gpu_num_ + 1].dev_name_ = "overall/";
 
   mode_ = (ProfilerMode)dmlc::GetEnv("MXNET_PROFILER_MODE", static_cast<int>(kOnlySymbolic));
   if (dmlc::GetEnv("MXNET_PROFILER_AUTOSTART", 0)) {
@@ -92,6 +93,15 @@ void Profiler::SetConfig(ProfilerMode mode, std::string output_filename) {
   this->filename_ = output_filename;
 }
 
+OprExecStat *Profiler::AddOprStat(int dev_type, uint32_t dev_id,
+                                    std::string name) {
+    OprExecStat* opr_stat = AddOprStat(dev_type, dev_id);
+    uint64_t id = std::hash<std::thread::id>()(std::this_thread::get_id());
+    opr_stat->thread_id = id;
+    strncpy(opr_stat->opr_name, name.c_str(), sizeof(opr_stat->opr_name) - 1);
+	return opr_stat;
+}
+
 OprExecStat *Profiler::AddOprStat(int dev_type, uint32_t dev_id) {
   std::unique_ptr<OprExecStat> opr_stat(new OprExecStat);
   opr_stat->dev_type = dev_type;
@@ -109,6 +119,9 @@ OprExecStat *Profiler::AddOprStat(int dev_type, uint32_t dev_id) {
     case Context::kCPUPinned:
       idx = cpu_num_ + gpu_num_;
       break;
+    case Context::kOverall:
+      idx = cpu_num_ + gpu_num_ + 1;
+      break;
     default:
       LOG(FATAL) << "Unknown dev_type: " << dev_type;
       return NULL;
@@ -154,7 +167,7 @@ void Profiler::DumpProfile() {
   file << "{" << std::endl;
   file << "    \"traceEvents\": [" << std::endl;
 
-  uint32_t dev_num = cpu_num_ + gpu_num_ + 1;
+  uint32_t dev_num = cpu_num_ + gpu_num_ + 1 + 1;
 
   for (uint32_t i = 0; i < dev_num; ++i) {
     const DevStat &d = profile_stat[i];
@@ -170,7 +183,7 @@ void Profiler::DumpProfile() {
       CHECK_NOTNULL(_opr_stat);
       std::unique_ptr<OprExecStat> opr_stat(_opr_stat);  // manage lifecycle
       uint32_t pid = i;
-      uint32_t tid = opr_stat->thread_id;
+      uint32_t tid = (opr_stat->key>=0)?opr_stat->key:opr_stat->thread_id;
 
       if (first_flag) {
         first_flag = false;
@@ -209,7 +222,6 @@ inline uint64_t NowInUsec() {
 
 void SetOprStart(OprExecStat* opr_stat) {
   if (!opr_stat) {
-    LOG(WARNING) << "SetOpStart: nullptr";
     return;
   }
   opr_stat->opr_start_rel_micros = NowInUsec() - Profiler::Get()->GetInitTime();
@@ -217,11 +229,22 @@ void SetOprStart(OprExecStat* opr_stat) {
 
 void SetOprEnd(OprExecStat* opr_stat) {
   if (!opr_stat) {
-    LOG(WARNING) << "SetOpEnd: nullptr";
     return;
   }
   opr_stat->opr_end_rel_micros   = NowInUsec() - Profiler::Get()->GetInitTime();
 }
 
+OprExecStat* SetOprStart(std::string &name) {
+  OprExecStat *opr_stat = nullptr;
+#if MXNET_USE_PROFILER
+  Profiler *profiler = Profiler::Get();
+  if (profiler->GetState() == Profiler::ProfilerState::kRunning) {
+      opr_stat = profiler->AddOprStat(Context::kCPUPinned, 0, name);
+      SetOprStart(opr_stat);
+  }
+#endif
+  return opr_stat;
+}
+
 }  // namespace engine
 }  // namespace mxnet
diff --git a/src/engine/profiler.h b/src/engine/profiler.h
index ebd9420..7d7e7a1 100644
--- a/src/engine/profiler.h
+++ b/src/engine/profiler.h
@@ -39,7 +39,7 @@ namespace engine {
  */
 struct OprExecStat {
   /*! \brief operation name */
-  char opr_name[32];
+  char opr_name[200];
   /*!
    * \brief operation execution start relative timestamp
    *        time unit is microsecond (10^-6 s)
@@ -59,6 +59,8 @@ struct OprExecStat {
   uint32_t dev_type;
   /*! \brief device id */
   uint32_t dev_id;
+
+  int32_t key = -1;
 };
 
 /*!
@@ -126,6 +128,8 @@ class Profiler {
   /*! \brief add one operation execution record in
    *   corresponding device statistics */
   OprExecStat* AddOprStat(int dev_type, uint32_t dev_id);
+  OprExecStat* AddOprStat(int dev_type, uint32_t dev_id, std::string name);
+
   /*! \return Profiler singleton */
   static Profiler* Get();
 
@@ -168,6 +172,8 @@ inline uint64_t NowInUsec();
 void SetOprStart(OprExecStat* opr_stat);
 /*! \brief set operation execution end timestamp */
 void SetOprEnd(OprExecStat* opr_stat);
+/*! \brief set operation execution start timestamp */
+OprExecStat* SetOprStart(std::string &name);
 
 }  // namespace engine
 }  // namespace mxnet
diff --git a/src/engine/threaded_engine.h b/src/engine/threaded_engine.h
index d85321c..b332beb 100644
--- a/src/engine/threaded_engine.h
+++ b/src/engine/threaded_engine.h
@@ -326,12 +326,8 @@ class ThreadedEngine : public Engine {
 #if MXNET_USE_PROFILER
     if (opr_block->profiling && threaded_opr->opr_name) {
       const Context& ctx = opr_block->ctx;
-      opr_block->opr_stat = Profiler::Get()->AddOprStat(ctx.dev_type, ctx.dev_id);
-      uint64_t id = std::hash<std::thread::id>()(std::this_thread::get_id());
-      opr_block->opr_stat->thread_id = id;
-      strncpy(opr_block->opr_stat->opr_name,
-        threaded_opr->opr_name,
-        sizeof(opr_block->opr_stat->opr_name) - 1);
+      opr_block->opr_stat = Profiler::Get()->AddOprStat(ctx.dev_type,
+        ctx.dev_id, threaded_opr->opr_name);
       // record operator start timestamp
       SetOprStart(opr_block->opr_stat);
     }
diff --git a/src/kvstore/kvstore_dist.h b/src/kvstore/kvstore_dist.h
index b00d0de..035f216 100644
--- a/src/kvstore/kvstore_dist.h
+++ b/src/kvstore/kvstore_dist.h
@@ -30,6 +30,7 @@
 #include <utility>
 #include "./kvstore_local.h"
 #include "mxnet/engine.h"
+#include "../engine/profiler.h"
 #include "ps/ps.h"
 #include "./kvstore_dist_server.h"
 #if MKL_EXPERIMENTAL == 1
@@ -225,6 +226,12 @@ class KVStoreDist : public KVStoreLocal {
         // convert to ps keys
         size_t size = recv_buf.shape().Size();
 
+        std::string name = "__Pull__"  + reverse_str_key_dict_[key] + "__" + std::to_string(size);
+        auto opr_stat = engine::SetOprStart(name);
+        if (opr_stat) {
+            opr_stat->key = key;
+        }
+
         PSKV& pskv = (gradient_compression_->get_type() == CompressionType::kNone) ?
                       EncodeDefaultKey(key, size, false) :
                       EncodeCompressedKey(key, size, false);
@@ -239,7 +246,10 @@ class KVStoreDist : public KVStoreLocal {
                   static_cast<int>(DataHandleType::kCompressedPushPull) :
                   static_cast<int>(DataHandleType::kDefaultPushPull);
         CHECK_NOTNULL(ps_worker_)->ZPull(
-          pskv.keys, vals, &pskv.lens, cmd, [vals, cb](){ delete vals; cb(); });
+          pskv.keys, vals, &pskv.lens, cmd, [vals, cb, opr_stat]() {
+              engine::SetOprEnd(opr_stat);
+              delete vals; cb();
+          });
       };
 
       CHECK_NOTNULL(Engine::Get())->PushAsync(
@@ -249,7 +259,7 @@ class KVStoreDist : public KVStoreLocal {
           {recv_buf.var()},
           FnProperty::kNormal,
           priority,
-          PROFILER_MESSAGE("KVStoreDistDefaultStoragePull"));
+          nullptr);
 
       comm_->Broadcast(key, recv_buf, grouped_vals[i], priority);
     }
@@ -406,6 +416,13 @@ class KVStoreDist : public KVStoreLocal {
         [this, key, pskv, send_buf](RunContext rctx, Engine::CallbackOnComplete cb) {
           // convert to ps keys
           size_t size = send_buf.shape().Size();
+
+          std::string name = "__Push__"  + reverse_str_key_dict_[key] + "__" + std::to_string(size);
+          auto opr_stat = engine::SetOprStart(name);
+          if(opr_stat) {
+              opr_stat->key = key;
+          }
+
           real_t* data = send_buf.data().dptr<real_t>();
 #if MKL_EXPERIMENTAL == 1
           mkl_set_tblob_eager_mode(send_buf.data());
@@ -414,7 +431,10 @@ class KVStoreDist : public KVStoreLocal {
           ps::SArray<real_t> vals(data, size, false);
           CHECK_NOTNULL(ps_worker_)->ZPush(
               pskv.keys, vals, pskv.lens,
-              static_cast<int>(DataHandleType::kDefaultPushPull), [cb]() { cb(); });
+              static_cast<int>(DataHandleType::kDefaultPushPull), [cb, opr_stat]() {
+                  engine::SetOprEnd(opr_stat);
+                  cb();
+              });
         };
     Engine::Get()->PushAsync(
         push_to_servers,
@@ -423,7 +443,7 @@ class KVStoreDist : public KVStoreLocal {
         {},
         FnProperty::kNormal,
         priority,
-        PROFILER_MESSAGE("KVStoreDistDefaultPush"));
+        nullptr);
   }
 
   // push row sparse gradient
-- 
2.7.4


From 8999f59b2b6260063a4a306eaab42c65f4ae9d8c Mon Sep 17 00:00:00 2001
From: Anand J <anandj@cs.ubc.ca>
Date: Sat, 27 Oct 2018 14:55:16 -0700
Subject: [PATCH 2/2] ResNet profiling

---
 example/image-classification/common/fit.py | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/example/image-classification/common/fit.py b/example/image-classification/common/fit.py
index 2b002c7..f4ed5fc 100755
--- a/example/image-classification/common/fit.py
+++ b/example/image-classification/common/fit.py
@@ -19,6 +19,9 @@ import mxnet as mx
 import logging
 import os
 import time
+from mxnet import profiler
+from os.path import expanduser
+import socket
 
 def _get_lr_scheduler(args, kv):
     if 'lr_factor' not in args or args.lr_factor >= 1:
@@ -195,8 +198,22 @@ def fit(args, network, data_loader, **kwargs):
     if args.top_k > 0:
         eval_metrics.append(mx.metric.create('top_k_accuracy', top_k=args.top_k))
 
+    logfile = expanduser("~")+"/profiler-"+str(socket.gethostname())+"-"+str(kv.rank)+".json"
+    mx.profiler.profiler_set_config(mode='all', filename=logfile)
+    def callback():
+        def switch_profiler(param):
+            if param.epoch == 0 and param.nbatch == 100:
+                profiler.profiler_set_state('run')
+            if param.epoch == 0 and param.nbatch == 110:
+                profiler.profiler_set_state('stop')
+                profiler.dump_profile()
+
+        return switch_profiler;
+
     # callbacks that run after each batch
-    batch_end_callbacks = [mx.callback.Speedometer(args.batch_size, args.disp_batches)]
+    batch_end_callbacks = [mx.callback.Speedometer(args.batch_size, args.disp_batches),
+            callback()]
+
     if 'batch_end_callback' in kwargs:
         cbs = kwargs['batch_end_callback']
         batch_end_callbacks += cbs if isinstance(cbs, list) else [cbs]
-- 
2.7.4

